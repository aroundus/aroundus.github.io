{
    "componentChunkName": "component---src-components-template-post-template-tsx",
    "path": "/post/monologue/self-growth-report/202201/",
    "result": {"data":{"site":{"siteMetadata":{"title":"AROUNDUS"}},"markdownRemark":{"id":"1596f87f-c3df-5bf8-a72e-61936ac0e24c","fields":{"slug":"/post/monologue/self-growth-report/202201/"},"html":"<h1>🤩📈<br />자기 성장 보고서</h1>\n<h2 id=\"결정-능력-\" style=\"position:relative;\">결정 능력 🧐<a href=\"#%EA%B2%B0%EC%A0%95-%EB%8A%A5%EB%A0%A5-\" aria-label=\"결정 능력  permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h2>\n<h3 id=\"Eunju-makes-udecisionsu-better\" style=\"position:relative;\">Eunju makes <u><strong>decisions</strong></u> #better<a href=\"#Eunju-makes-udecisionsu-better\" aria-label=\"Eunju makes udecisionsu better permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h3>\n<p>제자리에 머무르는 결정보다 더 나은 결정을 빠르게 내리는 일을 중요하게 생각합니다. 빠르게 변화하는 IT 트렌드에 맞춰 다양한 기술을 시도해 보면서 어떤 기술이 우리에게 좋은지 결정하고 학습하는 능력을 길렀습니다.</p>\n<p>덕분에 새로운 기술을 거의 다 적용해 놓았는데 뒤늦게 기술적으로 구현이 어려운 부분을 발견하거나, 도입한 기술보다 더 좋은 기술을 발견하는 아쉬움 등의 상황도 만들지 않게 됐습니다.</p>\n<h3 id=\"Scoped-CSS\" style=\"position:relative;\">Scoped CSS<a href=\"#Scoped-CSS\" aria-label=\"Scoped CSS permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h3>\n<p>팀 주간 회의 때 동료가 이전 회사에서 사용한 Vue의 <a href=\"https://vue-loader.vuejs.org/guide/scoped-css.html\">Scoped CSS</a> 방법론을 제안한 적이 있습니다. 하지만 우리는 모든 프로젝트에 <a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> 방법론을 도입한 상황이라 기존 프로젝트에 적용하는 데는 한계가 있었습니다. Scoped CSS가 React에서 대중적으로 사용하는 CSS 방법론도 아니었고요.</p>\n<p>당시에는 회의적으로 생각했지만 며칠 동안 곰곰히 생각해 본 결과 새로운 React 프로젝트에는 도입해도 좋겠다는 판단이 들었습니다. 마침 와디즈 스토어 메이커 스튜디오 프로젝트를 새 React 프로젝트에서 구성하려던 참이었고 동료들과 논의 끝에 먼저 도입해 보기로 했습니다.</p>\n<p>기술 서칭 기간 동안 Scoped CSS 방법론이 무엇인지 React에서 어떻게 사용해야 하는지 적용 사례를 살펴보고, CRA 대신 <a href=\"https://github.com/gsoft-inc/craco\">CRACO</a> 라이브러리를 사용할 필요가 있어 CRACO를 공부하고, CSS Modules를 완벽하게 대체할 수 있을 때까지 계속 적용하는 과정을 통해 마침내 무사히 도입에 성공할 수 있었습니다.</p>\n<p>촉박한 일정 안에서 기존에 사용하는 CSS Modules 방법론을 사용해도 됐지만 <em>- 특히 최근에 입사한 -</em> 팀 동료들이 CSS Modules로 스타일을 작성하는 데 어려움을 느끼는 부분에서 학습의 의지를 불태우지 않았나 싶습니다.</p>\n<h3 id=\"React-Hook-Form\" style=\"position:relative;\">React Hook Form<a href=\"#React-Hook-Form\" aria-label=\"React Hook Form permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h3>\n<p>와디즈 스토어 메이커 스튜디오에서 제가 맡은 <strong>프로젝트 관리 메뉴</strong>는 프로젝트 제출을 위한 폼 데이터를 다루는 화면입니다. 우리는 폼 데이터를 다루기 위한 다양한 방법 중 React Hook Form, Formik 2개 라이브러리를 고민했고, <a href=\"https://react-hook-form.com/kr\">React Hook Form</a> 라이브러리를 사용하기로 했습니다.</p>\n<p>React Hook Form의 경험이 없었던 저는 다른 프로젝트에서 사용한 코드를 살펴보고 우리가 v5 버전을 사용하고 있음을 알았습니다. 하지만 2년 전 버전이었기 때문에 이 버전을 유지하고 동일한 코드로 작성할지, 최신 v7 버전을 적용하고 버전에 맞게 새로운 코드로 작성할지 고민에 빠졌습니다.</p>\n<p>동료들과 논의 끝에 (혹시 모르니까) IE 브라우저를 지원하는 v6 버전을 사용하기로 했고, 효율적인 유효성 검사를 위한 Yup 라이브러리를 함께 공부하면서 프로젝트가 끝나는 순간까지 React Hook Form과 긴 싸움을 했습니다. 지금은 화해하고 React Hook Form과 잘 지내고 있습니다. 🤝</p>\n<h3 id=\"TypeScript-️️️\" style=\"position:relative;\">TypeScript ⭐️⭐️⭐️<a href=\"#TypeScript-%EF%B8%8F%EF%B8%8F%EF%B8%8F\" aria-label=\"TypeScript ️️️ permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h3>\n<p>우리가 작업하는 대부분의 프로젝트는 아직까지 JavaScript 기반입니다. 그래서 2021년에 가장 잘한 결정이 바로 와디즈 스토어 메이커 스튜디오를 TypeScript로 작성한 일이라고 생각합니다.</p>\n<p>이때는 도입해야 할 기술이 1~2개가 아니었습니다. <small>(Scoped CSS, CRACO, React Hook Form, Yup, React Toolkit 등 😱)</small> 저조차도 ‘과연 잘할 수 있을까?’ 의문이 들었습니다. 다른 프로젝트에서 함께 TypeScript로 작성하기로 했던 동료도 이번에는 일정이 여의치 않아 JavaScript로 작성한다고 했으니까요.</p>\n<p>하지만 제자리에 머무는 결정보다 <em>- TypeScript 너란 녀석에 적응하는 -</em> 더 나은 결정을 하기로 했습니다. 그리고 여러 가지 문제가 터졌는데 그 중 하나는 <a href=\"https://github.com/froala/wysiwyg-editor-release\">Froala Editor</a>가 TypeScript를 지원하지 않는다는 사실이었습니다.</p>\n<p><figure class=\"gatsby-resp-image-figure\" style=\"\">\n    <span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1920px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/0ad11c07414a3aec6169cd6d53345cc1/998db/declare-froala-editor.jpg\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 60.83333333333334%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"Froala Editor 타입 정의하기\"\n        title=\"Froala Editor 타입 정의하기\"\n        src=\"/static/0ad11c07414a3aec6169cd6d53345cc1/aaf92/declare-froala-editor.jpg\"\n        srcset=\"/static/0ad11c07414a3aec6169cd6d53345cc1/a3e66/declare-froala-editor.jpg 480w,\n/static/0ad11c07414a3aec6169cd6d53345cc1/fb816/declare-froala-editor.jpg 960w,\n/static/0ad11c07414a3aec6169cd6d53345cc1/aaf92/declare-froala-editor.jpg 1920w,\n/static/0ad11c07414a3aec6169cd6d53345cc1/1d134/declare-froala-editor.jpg 2880w,\n/static/0ad11c07414a3aec6169cd6d53345cc1/998db/declare-froala-editor.jpg 3072w\"\n        sizes=\"(max-width: 1920px) 100vw, 1920px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n        decoding=\"async\"\n      />\n  </a>\n    </span>\n    <figcaption class=\"gatsby-resp-image-figcaption\"><p>Froala Editor 타입 정의하기</p></figcaption>\n  </figure></p>\n<p>구글링을 통해 어느 개발자가 업로드한 froala-editor.d.ts 파일을 기반으로 API 문서와 비교하면서 타입 정의를 검증하고 수정했던 일이 기억에 남습니다. 아마도 이 시점에 TypeScript 실력이 많이 성장하지 않았나 싶습니다.</p>\n<p><figure class=\"gatsby-resp-image-figure\" style=\"\">\n    <span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1920px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/fa56443c0c4678ac8f0f22debc4e58d1/d1888/froala-editor-in-maker-studio.jpg\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 80.83333333333333%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"스튜디오 화면에 적용한 Froala Editor\"\n        title=\"스튜디오 화면에 적용한 Froala Editor\"\n        src=\"/static/fa56443c0c4678ac8f0f22debc4e58d1/aaf92/froala-editor-in-maker-studio.jpg\"\n        srcset=\"/static/fa56443c0c4678ac8f0f22debc4e58d1/a3e66/froala-editor-in-maker-studio.jpg 480w,\n/static/fa56443c0c4678ac8f0f22debc4e58d1/fb816/froala-editor-in-maker-studio.jpg 960w,\n/static/fa56443c0c4678ac8f0f22debc4e58d1/aaf92/froala-editor-in-maker-studio.jpg 1920w,\n/static/fa56443c0c4678ac8f0f22debc4e58d1/d1888/froala-editor-in-maker-studio.jpg 1980w\"\n        sizes=\"(max-width: 1920px) 100vw, 1920px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n        decoding=\"async\"\n      />\n  </a>\n    </span>\n    <figcaption class=\"gatsby-resp-image-figcaption\"><p>스튜디오 화면에 적용한 Froala Editor</p></figcaption>\n  </figure></p>\n<h2 id=\"개발-능력-\" style=\"position:relative;\">개발 능력 💻<a href=\"#%EA%B0%9C%EB%B0%9C-%EB%8A%A5%EB%A0%A5-\" aria-label=\"개발 능력  permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h2>\n<p>여러 명의 프론트엔드 개발자와 같이 코드를 작성한 경험이 없었던 저는 협업을 하는 동안 어떻게 하면 도메인의 복잡도를 줄이고 응집성 있는 코드를 작성할 수 있을지 고민이 많았습니다.</p>\n<p>TypeScirpt 인터페이스 구분자는 ,(콤마)로 할지 ;(세미콜론)으로 할지 등의 소소한 기준부터 프로젝트 폴더 구조, 네이밍, 상태 관리, API 등의 커다란 규약까지 논의하고 정하면서 코드의 질이 많이 향상됨을 느꼈습니다.</p>\n<p>기획 문서에 나온 요구 사항을 코드로 작성할 때도 이전에는 나무의 관점에서 작성했다면 지금은 숲의 관점에서 작성하게 됐습니다. 예를 들면, 콤비네이션 함수를 만들 때 2개 목록에 대해서만 만들지 앞으로 목록이 3개, 4개 또는 그 이상이 될 가능성을 고려해서 만들지 고민을 했습니다.</p>\n<h3 id=\"맞춤법\" style=\"position:relative;\">맞춤법<a href=\"#%EB%A7%9E%EC%B6%A4%EB%B2%95\" aria-label=\"맞춤법 permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h3>\n<p>브랜드 이미지의 전문성과 신뢰성에 +@ 효과를 낼 수 있도록 맞춤법의 중요성을 강조하며 코드를 작성하였습니다. 지금은 더 나아가 웹 접근성 측면에서 스크린 리더가 정확한 발음을 구사할 수 있고, 사용자가 콘텐츠를 안정적으로 접할 수 있는 또 하나의 기술이라는 생각을 가지고 있습니다.</p>\n<h3 id=\"상품-옵션-콤비네이션-알고리즘\" style=\"position:relative;\">상품 옵션 콤비네이션 알고리즘<a href=\"#%EC%83%81%ED%92%88-%EC%98%B5%EC%85%98-%EC%BD%A4%EB%B9%84%EB%84%A4%EC%9D%B4%EC%85%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"상품 옵션 콤비네이션 알고리즘 permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h3>\n<p>와디즈 스토어 메이커 스튜디오에서 개발하기 어려웠던 부분 중 하나가 상품 옵션에 대한 <a href=\"/post/typescript/combine-arrays\">콤비네이션 목록 알고리즘</a>을 만드는 일이었습니다. 알고리즘은 코딩 테스트에만 사용할 줄 알았는데 이렇게 업무에도 적용하게 될 줄은 몰랐거든요.</p>\n<p>처음에는 알고리즘 없이 나무의 관점에서 작성하려고 했습니다. 그렇게 작성해도 작동은 할 테니 말입니다. 하지만 이번 기회에 이 알고리즘 만큼은 뽀개고 싶었고, 며칠간 씨름을 거듭한 끝에 알고리즘을 만드는 데 성공하였습니다. <small>(만약에 이 문제가 코딩 테스트로 나왔다면 떨어졌겠죠?)</small> 덕분에 알고리즘 실력이 상승해서 뿌듯합니다.</p>\n<h2 id=\"의사소통-능력-\" style=\"position:relative;\">의사소통 능력 💬<a href=\"#%EC%9D%98%EC%82%AC%EC%86%8C%ED%86%B5-%EB%8A%A5%EB%A0%A5-\" aria-label=\"의사소통 능력  permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h2>\n<p>개발자의 1차 고객은 협업하는 동료들이라고 생각합니다. 동료들이 설계한 내용을 덜 이해한 상태로 개발하는 일이 없도록 요구 사항에 대한 의미를 빠르게 파악해서 일을 안심하고 맡길 수 있는 개발자가 되기 위한 노력을 했습니다.</p>\n<h3 id=\"유효성-검사\" style=\"position:relative;\">유효성 검사<a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\" aria-label=\"유효성 검사 permalink\" class=\"icon-heading-link after\"><svg viewBox=\"0 0 24 24\" height=\"24\" aria-hidden=\"true\"><path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path></svg></a></h3>\n<p>와디즈 스토어 메이커 스튜디오의 프로젝트 관리 메뉴는 프로젝트 상태별로 필드의 활성화 처리가 다르고, 권한에 따라 특정 필드만 저장해야 하고, 특정 조건에서만 노출이 필요한 문구가 있는 등 비즈니스적 요구 사항이 복잡한 화면이었습니다. 문제는 이 프로젝트를 설계하는 기획자도 입사한지 3개월밖에 되지 않았다는 겁니다.</p>\n<p>어쩌면 기획자보다 개발자인 우리가 더 서비스 플로우를 잘 알지도 모르는 상황에서 기획자가 지치지 않고 더 나은 설계를 할 수 있도록 기획안을 꼼꼼하게 점검하고 보강할 필요가 있었습니다.</p>\n<p>특히 유효성 검사는 기획자도 고려하기 어려운 부분이었습니다. 디자이너도 모든 유효성 검사에 대비하는 UI를 만들 수가 없었고요. 그래서 기획에서 미처 생각하지 못한, 하지만 반드시 고려해야 하는 수많은 유효성 검사를 파악하고 시안이 없으면 만들어서 제안을 했습니다. 지금도 유효성 검사로 열심히 소통한 일은 다행이라고 생각합니다.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#br-%EC%9E%90%EA%B8%B0-%EC%84%B1%EC%9E%A5-%EB%B3%B4%EA%B3%A0%EC%84%9C\">🤩📈<br />자기 성장 보고서</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EC%A0%95-%EB%8A%A5%EB%A0%A5-\">결정 능력 🧐</a></li>\n<li><a href=\"#%EA%B0%9C%EB%B0%9C-%EB%8A%A5%EB%A0%A5-\">개발 능력 💻</a></li>\n<li><a href=\"#%EC%9D%98%EC%82%AC%EC%86%8C%ED%86%B5-%EB%8A%A5%EB%A0%A5-\">의사소통 능력 💬</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"category":"monologue","index":1,"title":"2022년을 시작하는 나의 역량은 어떻게 달라졌을까?","description":"성장한 주요 역량을 정리한 2021년 자기 성장 보고서입니다. 뒤로 갈수록 내용이 부실한 건 비밀입니다.","image":"self-growth-report","date":"2022-01-17"}},"prevPost":{"fields":{"slug":"/post/typescript/camelcase-type/"},"frontmatter":{"category":"typescript","title":"CamelCase Type 만들기"}},"nextPost":{"fields":{"slug":"/post/typescript/combine-arrays/"},"frontmatter":{"category":"typescript","title":"두 배열의 모든 조합으로 구성된 배열 만들기"}}},"pageContext":{"id":"1596f87f-c3df-5bf8-a72e-61936ac0e24c","prevPostID":"e2979e4d-1ec1-5b8e-aaf4-4014ab2c5fd8","nextPostID":"570cab79-8bac-559b-b647-5376dec4a352"}},
    "staticQueryHashes": ["1955143157","2731891648"]}